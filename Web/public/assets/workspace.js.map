{"version":3,"sources":["webpack:///./src/shared/components/Footer.js","webpack:///./src/shared/components/GeneralUI/TitleBar.js","webpack:///./src/shared/routes/Workspace/components/TestError.js","webpack:///./src/shared/routes/Workspace/components/TestsSummary.js","webpack:///./src/shared/routes/Workspace/components/TestCase.js","webpack:///./src/shared/routes/Workspace/components/ProblemPrompt.js","webpack:///./src/shared/components/Socket.js","webpack:///./src/shared/routes/Workspace/WorkSpace.js"],"names":["_react","_interopRequireDefault","__webpack_require__","_theme","_styledComponents","default","_ref","className","createElement","primaryColor","backgroundColor","_ref$textColor","textColor","_ref$color","color","secondaryColor","title","_ref$elementLeft","elementLeft","style","float","props","reason","errorColor","_TestError","testErrorInfo","testsPassed","testsFailed","map","e","i","key","testCaseName","isPassed","givenInput","expectedOutput","givenOutput","display","marginLeft","successColor","promptText","dangerouslySetInnerHTML","__html","_interopRequireWildcard","_propTypes","ComponentToWrap","_class","_temp","_Component","SocketComponent","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","apply","arguments","_inherits","Component","value","socket","context","_extends","defineProperty","configurable","enumerable","writable","PropTypes","oneOfType","object","bool","_reactRouterDom","_Socket","_ProblemPrompt","_TestCase","_TestsSummary","_TitleBar","_FlatButton","_Footer","Workspace","_this","call","_assertThisInitialized","questionID","testInfo","state","qId","setState","tests","solutionProcessing","console","log","send","JSON","stringify","type","code","solutionText","match","params","id","done","loaded","problemPrompt","_this2","fetch","then","r","status","text","history","push","registerType","receivedTestInfo","Link","to","padding","marginBottom","margin","justifyContent","onClick","submit","disabled","big","testCasesPassed","testCasesFailed","testCaseInfo","c","name","propTypes","shape","func","isRequired","withRouter"],"mappings":"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","file":"WorkSpace.js","sourcesContent":["import React from 'react'\nimport { primaryColor, backgroundColor } from '../theme/theme'\nimport styled from 'styled-components'\n\nconst Footer = ({ className }) => (<div className={className}><h2>Adam Towers</h2></div>)\n\nexport default styled(Footer)`\n  background-color: ${primaryColor};\n  color: ${backgroundColor};\n  font-size: 12px;\n  width: 100%;\n  \n   h2 {\n    font-weight: 100;\n    padding: 5px 10px;\n    margin: 0;\n  }\n`\n","import React from 'react'\nimport { backgroundColor, secondaryColor } from '../../theme/theme'\nimport styled from 'styled-components'\n\nconst TitleBar = ({ textColor=backgroundColor, color=secondaryColor, className, title, elementLeft=null }) =>\n  <div className={className}>\n    {elementLeft &&\n      <span style={{\n        float: 'left'\n      }}>\n      {elementLeft}\n      </span>\n    }\n    {title}\n  </div>\n\nexport default styled(TitleBar)`\n  padding: 10px;\n  background-color: ${props => props.color};\n  color: ${props => props.textColor};\n  font-size: 24px;\n  text-align: center;\n  font-weight: 100;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { errorColor } from '../../../theme/theme'\n\nconst TestError = ({reason, className}) =>\n  (<div className={className}>\n    <div className=\"errorIcon\">⚠️</div>\n    <div className=\"errorText\">\n      <p>{reason}</p>\n    </div>\n\n  </div>)\n\nexport default styled(TestError)`\n  color: ${errorColor};\n  border: 1px solid ${errorColor};\n  padding: 10px;\n  border-radius: 15px;\n  display: flex;\n  \n  .errorIcon {\n    font-size: x-large;\n    padding-right: 15px;\n  }\n  \n  .errorText {\n  }\n  \n  p {\n    margin: 0\n  }\n`","import React from 'react'\nimport styled from 'styled-components'\nimport { textColor } from '../../../theme/theme'\nimport TestError from './TestError'\n\nconst TestsSummary = ({testErrorInfo, testsPassed, testsFailed, className}) =>\n  (<div className={className}>\n    {testErrorInfo && testErrorInfo.map((e, i) =>\n      <TestError key={i} reason={e.reason} />\n    )}\n    {(testsPassed > 0 || testsFailed > 0) &&\n      <div>\n        {testsPassed}/{testsFailed + testsPassed} Test Cases Passed\n      </div>\n    }\n  </div>)\n\nexport default styled(TestsSummary)`\n  color: ${textColor};\n`","import React from 'react'\nimport { textColor, errorColor, successColor } from '../../../theme/theme'\nimport styled from 'styled-components'\n\nconst TestCase = ({ className, testCaseName, isPassed, givenInput, expectedOutput, givenOutput}) =>\n  (<div className={className} >\n    <div style={{\n      display: \"inline-block\"\n    }}>\n      <div>\n        <h2>\n          {isPassed ? \"Passed\" : \"Failed\"}\n        </h2>\n      </div>\n      <div>\n        <h3>\n        {testCaseName}\n        </h3>\n      </div>\n    </div>\n    <div style={{\n      display: \"inline-block\",\n      marginLeft: \"20px\"\n    }}>\n      <p>Input: {givenInput}</p>\n    </div>\n    <div style={{\n      display: \"inline-block\",\n      marginLeft: \"20px\"\n    }}>\n      =>\n    </div>\n    <div style={{\n      display: \"inline-block\",\n      marginLeft: \"20px\"\n    }}>\n      <p>Expected Output: {expectedOutput}</p>\n      <p>Your Output: {givenOutput}</p>\n    </div>\n\n  </div>)\n\nexport default styled(TestCase)`\n  margin: 2% 0;\n  padding: 10px 5%;\n  color: ${ props => props.isPassed ? successColor : errorColor };\n  font-size: 18px;\n  text-align: left;\n  border: 1px solid ${ props => props.isPassed ? successColor : errorColor };\n  border-radius: 5px;\n  \n  h2 {\n    margin-bottom: 0;\n    margin-top: 10px;\n  }\n  \n  h3 {\n    font-weight: 100;\n    margin-top: 0;\n    margin-bottom: 10px;\n  }\n  \n  p {\n    margin: 5px 0 0 10px;\n  }\n`\n","import React from 'react'\nimport { textColor } from '../../../theme/theme'\nimport styled from 'styled-components'\n\nconst ProblemPrompt = ({ className, promptText }) =>\n  (<div className={className} dangerouslySetInnerHTML={{__html: promptText}} />)\n\nexport default styled(ProblemPrompt)`\n  color: ${textColor};\n  font-size: 18px;\n  text-align: left;\n`\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst socket = (ComponentToWrap) => {\n  return class SocketComponent extends Component {\n    static contextTypes = {\n      socket: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    }\n\n    render() {\n      const { socket } = this.context\n      // what we do is basically rendering `ComponentToWrap`\n      // with an added `socket` prop, like a hook\n      return (<ComponentToWrap { ...this.props } socket={socket} />)\n    }\n  }\n}\n\nexport default socket","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// library components\nimport { Link, withRouter } from 'react-router-dom'\n\n// higher order components\nimport styled from 'styled-components'\nimport socket from '../../components/Socket'\n\n// specific custom components\nimport ProblemPrompt from './components/ProblemPrompt.js'\nimport TestCase from './components/TestCase'\nimport TestsSummary from './components/TestsSummary'\n\n// general custom components\nimport { textColor, backgroundColor, primaryColor } from '../../theme/theme'\nimport TitleBar from '../../components/GeneralUI/TitleBar.js'\nimport FlatButton from '../../components/GeneralUI/FlatButton/FlatButton'\nimport Footer from '../../components/Footer.js'\nimport universal from 'react-universal-component';\n\n// let Editor = universal(import('./components/Editor'))\n/*\n  {canUseDOM && <Editor editorContents={this.state.solutionText} onChange={e => this.setState({\n      solutionText: e // if there's performance issues, turn re-render on solutionText change off\n    })}/>}\n*/\n\nclass Workspace extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      qId: props.match.params.id,\n      done: true,\n      loaded: false,\n      problemPrompt: '',\n      solutionText: 'public class HelloWorld {\\n\\tpublic static int add1(int a) { return a + 1; }\\n}',\n      solutionProcessing: false,\n      tests: null\n    }\n  }\n\n  receivedTestInfo = ({ questionID, testInfo }) => {\n    if (questionID === this.state.qId) {\n      this.setState({\n        tests: testInfo,\n        solutionProcessing: false\n      })\n    } else {\n      console.log('[ERROR] received test info for a different question than is open')\n    }\n  }\n\n  componentDidMount() {\n    fetch('/api/r/' + this.state.qId).then(r => {\n      if (r.status === 200) {\n        return r.text().then(r => this.setState({\n          problemPrompt: r\n        }))\n      } else {\n        this.props.history.push('/404')\n      }\n    })\n\n    this.props.socket.registerType('TestInfo', this.receivedTestInfo)\n    this.props.socket.registerType('CodeReceived', () => this.setState({\n      solutionProcessing: true\n    }))\n  }\n\n\n  submit = () => {\n    // const endpoint = '/api/submit/' + encodeURIComponent(this.state.solutionText);\n    this.setState({\n      tests: null\n    })\n\n    this.props.socket.send(JSON.stringify({\n      type: 'TestCode',\n      questionID: this.state.qId,\n      code: this.state.solutionText\n    }))\n  }\n\n  render () {\n    const canUseDOM = typeof window !== 'undefined'\n    return (\n      <div className={this.props.className}>\n        <TitleBar\n          color={backgroundColor}\n          textColor={textColor}\n          elementLeft={<Link to=\"/q\">🔥</Link>}\n        />\n        <div style={{\n          padding: '1% 7%',\n          marginBottom: '5%'\n        }}>\n          <ProblemPrompt promptText={this.state.problemPrompt}/>\n          <div>\n\n          </div>\n          <div style={{\n            margin: '2% 0',\n            display: 'flex',\n            justifyContent: 'center'\n          }}>\n            <FlatButton\n              text={this.state.solutionProcessing ? 'Processing...' : 'Submit Code'}\n              color={primaryColor}\n              backgroundColor={backgroundColor}\n              onClick={this.submit}\n              disabled={this.state.solutionProcessing}\n              big\n            />\n          </div>\n          {this.state.tests ?\n            <div>\n              <TestsSummary\n                testErrorInfo={this.state.tests.testErrorInfo}\n                testsPassed={this.state.tests.testCasesPassed}\n                testsFailed={this.state.tests.testCasesFailed}\n              />\n              <div>\n                {this.state.tests.testCaseInfo.map((c) =>\n                  <TestCase\n                    key={c.name}\n                    testCaseName={c.name}\n                    isPassed={c.isPassed}\n                    givenInput={c.givenInput}\n                    expectedOutput={c.expectedOutput}\n                    givenOutput={c.givenOutput}\n                  />\n                )}\n              </div>\n            </div> : null }\n        </div>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nWorkspace.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default styled(socket(withRouter(Workspace)))`\n  background-color: ${backgroundColor};\n  min-height: 100%;\n  height: 100%;\n  \n  table {\n    width: 100%;\n    text-align: left;\n    \n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 5px;\n  }\n  \n  thead {\n    color: ${primaryColor};\n  }\n  \n  tbody {\n    color: ${textColor};\n  }\n  \n  code {\n    background-color: grey;\n    border-radius: 5px;\n    padding: 3px;\n  }\n`\n"],"sourceRoot":""}